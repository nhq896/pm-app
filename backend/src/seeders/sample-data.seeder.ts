import "dotenv/config";
import mongoose from "mongoose";
import connectDatabase from "../config/database.config";

// Models
import UserModel from "../models/user.model";
import AccountModel from "../models/account.model";
import WorkspaceModel from "../models/workspace.model";
import MemberModel from "../models/member.model";
import ProjectModel from "../models/project.model";
import TaskModel from "../models/task.model";
import RoleModel from "../models/roles-permission.model";

// Enums
import { ProviderEnum } from "../enums/account-provider.enum";
import { Roles } from "../enums/role.enum";
import { TaskStatusEnum, TaskPriorityEnum } from "../enums/task.enum";

// Utils
import { hashValue } from "../utils/bcrypt";

const seedSampleData = async () => {
  console.log("üöÄ Starting sample data seeding...");

  try {
    await connectDatabase();
    const session = await mongoose.startSession();
    session.startTransaction();

    // L·∫•y roles t·ª´ DB
    const ownerRole = await RoleModel.findOne({ name: Roles.OWNER }).session(
      session
    );
    const adminRole = await RoleModel.findOne({ name: Roles.ADMIN }).session(
      session
    );
    const memberRole = await RoleModel.findOne({ name: Roles.MEMBER }).session(
      session
    );

    if (!ownerRole || !adminRole || !memberRole) {
      throw new Error("Roles not found. Please run role seeder first!");
    }

    // 1. T·∫°o Users m·∫´u
    console.log("üë§ Creating sample users...");

    const usersData = [
      {
        name: "Test User",
        email: "test@example.com",
        password: "password123",
        profilePicture:
          "https://images.unsplash.com/photo-1633332755192-727a05c4013d?w=150",
      },
      {
        name: "Nguy·ªÖn VƒÉn An",
        email: "an@example.com",
        password: "password123",
        profilePicture:
          "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150",
      },
      {
        name: "Tr·∫ßn Th·ªã B√¨nh",
        email: "binh@example.com",
        password: "password123",
        profilePicture:
          "https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150",
      },
      {
        name: "L√™ Minh C∆∞·ªùng",
        email: "cuong@example.com",
        password: "password123",
        profilePicture:
          "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150",
      },
      {
        name: "Ph·∫°m Thu Dung",
        email: "dung@example.com",
        password: "password123",
        profilePicture:
          "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150",
      },
      {
        name: "Ho√†ng VƒÉn Em",
        email: "em@example.com",
        password: "password123",
        profilePicture:
          "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=150",
      },
    ];

    // Hash passwords v√† t·∫°o users m·ªôt c√°ch tu·∫ßn t·ª± ƒë·ªÉ trigger pre-save hooks
    const createdUsers = [];
    for (const userData of usersData) {
      const user = new UserModel(userData);
      await user.save({ session });
      createdUsers.push(user);
    }

    console.log(`‚úÖ Created ${createdUsers.length} users`);

    // 2. T·∫°o Accounts cho users
    console.log("üîê Creating accounts...");
    const accounts = createdUsers.map((user) => ({
      userId: user._id,
      provider: ProviderEnum.EMAIL,
      providerId: user.email,
    }));

    await AccountModel.insertMany(accounts, { session });
    console.log(`‚úÖ Created ${accounts.length} accounts`);

    // 3. T·∫°o Workspaces m·∫´u
    console.log("üè¢ Creating sample workspaces...");

    const workspaces = [
      {
        name: "Test Workspace",
        description: "Workspace ƒë·ªÉ test v√† demo c√°c t√≠nh nƒÉng",
        owner: createdUsers[0]._id, // Test User
      },
      {
        name: "C√¥ng ty TNHH Tech Solutions",
        description: "Workspace cho d·ª± √°n ph√°t tri·ªÉn ph·∫ßn m·ªÅm v√† ·ª©ng d·ª•ng",
        owner: createdUsers[1]._id, // Nguy·ªÖn VƒÉn An
      },
      {
        name: "Startup E-commerce",
        description: "Workspace cho d·ª± √°n th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠",
        owner: createdUsers[2]._id, // Tr·∫ßn Th·ªã B√¨nh
      },
      {
        name: "Agency Marketing Digital",
        description: "Workspace cho c√°c chi·∫øn d·ªãch marketing v√† qu·∫£ng c√°o",
        owner: createdUsers[3]._id, // L√™ Minh C∆∞·ªùng
      },
    ];

    const createdWorkspaces = await WorkspaceModel.insertMany(workspaces, {
      session,
    });
    console.log(`‚úÖ Created ${createdWorkspaces.length} workspaces`);

    // 4. C·∫≠p nh·∫≠t currentWorkspace cho users
    console.log("üîÑ Updating user current workspaces...");
    for (let i = 0; i < createdUsers.length; i++) {
      const workspaceIndex = i < createdWorkspaces.length ? i : 0;
      await UserModel.findByIdAndUpdate(
        createdUsers[i]._id,
        { currentWorkspace: createdWorkspaces[workspaceIndex]._id },
        { session }
      );
    }

    // 5. T·∫°o Members cho workspaces
    console.log("üë• Creating workspace members...");

    const members = [
      // Workspace 0 - Test Workspace
      {
        userId: createdUsers[0]._id, // Test User
        workspaceId: createdWorkspaces[0]._id,
        role: ownerRole._id,
      },
      {
        userId: createdUsers[1]._id, // Nguy·ªÖn VƒÉn An
        workspaceId: createdWorkspaces[0]._id,
        role: adminRole._id,
      },
      {
        userId: createdUsers[2]._id, // Tr·∫ßn Th·ªã B√¨nh
        workspaceId: createdWorkspaces[0]._id,
        role: memberRole._id,
      },

      // Workspace 1 - Tech Solutions
      {
        userId: createdUsers[1]._id, // Nguy·ªÖn VƒÉn An
        workspaceId: createdWorkspaces[1]._id,
        role: ownerRole._id,
      },
      {
        userId: createdUsers[2]._id, // Tr·∫ßn Th·ªã B√¨nh
        workspaceId: createdWorkspaces[1]._id,
        role: adminRole._id,
      },
      {
        userId: createdUsers[3]._id, // L√™ Minh C∆∞·ªùng
        workspaceId: createdWorkspaces[1]._id,
        role: memberRole._id,
      },
      {
        userId: createdUsers[4]._id, // Ph·∫°m Thu Dung
        workspaceId: createdWorkspaces[1]._id,
        role: memberRole._id,
      },

      // Workspace 2 - E-commerce
      {
        userId: createdUsers[2]._id, // Tr·∫ßn Th·ªã B√¨nh
        workspaceId: createdWorkspaces[2]._id,
        role: ownerRole._id,
      },
      {
        userId: createdUsers[1]._id, // Nguy·ªÖn VƒÉn An
        workspaceId: createdWorkspaces[2]._id,
        role: adminRole._id,
      },
      {
        userId: createdUsers[5]._id, // Ho√†ng VƒÉn Em
        workspaceId: createdWorkspaces[2]._id,
        role: memberRole._id,
      },

      // Workspace 3 - Marketing
      {
        userId: createdUsers[3]._id, // L√™ Minh C∆∞·ªùng
        workspaceId: createdWorkspaces[3]._id,
        role: ownerRole._id,
      },
      {
        userId: createdUsers[4]._id, // Ph·∫°m Thu Dung
        workspaceId: createdWorkspaces[3]._id,
        role: adminRole._id,
      },
      {
        userId: createdUsers[5]._id, // Ho√†ng VƒÉn Em
        workspaceId: createdWorkspaces[3]._id,
        role: memberRole._id,
      },
    ];

    await MemberModel.insertMany(members, { session });
    console.log(`‚úÖ Created ${members.length} members`);

    // 6. T·∫°o Projects m·∫´u
    console.log("üìÅ Creating sample projects...");

    const projects = [
      // Workspace 0 - Test Workspace projects
      {
        name: "Demo Project",
        description: "D·ª± √°n demo ƒë·ªÉ test t√≠nh nƒÉng",
        emoji: "üéØ",
        workspace: createdWorkspaces[0]._id,
        createdBy: createdUsers[0]._id, // Test User
      },
      {
        name: "Task Management System",
        description: "H·ªá th·ªëng qu·∫£n l√Ω c√¥ng vi·ªác v√† d·ª± √°n",
        emoji: "üìã",
        workspace: createdWorkspaces[0]._id,
        createdBy: createdUsers[0]._id, // Test User
      },
      {
        name: "E-learning Platform",
        description: "N·ªÅn t·∫£ng h·ªçc t·∫≠p tr·ª±c tuy·∫øn",
        emoji: "üéì",
        workspace: createdWorkspaces[0]._id,
        createdBy: createdUsers[1]._id, // Nguy·ªÖn VƒÉn An
      },
      {
        name: "Chat Application",
        description: "·ª®ng d·ª•ng chat realtime v·ªõi Socket.io",
        emoji: "üí¨",
        workspace: createdWorkspaces[0]._id,
        createdBy: createdUsers[2]._id, // Tr·∫ßn Th·ªã B√¨nh
      },
      {
        name: "Dashboard Analytics",
        description: "Dashboard ph√¢n t√≠ch d·ªØ li·ªáu v√† b√°o c√°o",
        emoji: "üìä",
        workspace: createdWorkspaces[0]._id,
        createdBy: createdUsers[0]._id, // Test User
      },
      {
        name: "Blog CMS",
        description: "H·ªá th·ªëng qu·∫£n l√Ω n·ªôi dung blog",
        emoji: "üìù",
        workspace: createdWorkspaces[0]._id,
        createdBy: createdUsers[1]._id, // Nguy·ªÖn VƒÉn An
      },

      // Workspace 1 - Tech Solutions projects
      {
        name: "Website C√¥ng ty",
        description:
          "Ph√°t tri·ªÉn website gi·ªõi thi·ªáu c√¥ng ty v·ªõi React & Node.js",
        emoji: "üåê",
        workspace: createdWorkspaces[1]._id,
        createdBy: createdUsers[1]._id, // Nguy·ªÖn VƒÉn An
      },
      {
        name: "Mobile App iOS",
        description: "·ª®ng d·ª•ng di ƒë·ªông cho n·ªÅn t·∫£ng iOS",
        emoji: "üì±",
        workspace: createdWorkspaces[1]._id,
        createdBy: createdUsers[2]._id, // Tr·∫ßn Th·ªã B√¨nh
      },
      {
        name: "API Backend",
        description: "Ph√°t tri·ªÉn API backend cho c√°c d·ª± √°n",
        emoji: "‚ö°",
        workspace: createdWorkspaces[1]._id,
        createdBy: createdUsers[1]._id, // Nguy·ªÖn VƒÉn An
      },

      // Workspace 2 - E-commerce projects
      {
        name: "S√†n th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠",
        description: "X√¢y d·ª±ng marketplace online",
        emoji: "üõí",
        workspace: createdWorkspaces[2]._id,
        createdBy: createdUsers[2]._id, // Tr·∫ßn Th·ªã B√¨nh
      },
      {
        name: "Payment Gateway",
        description: "T√≠ch h·ª£p c·ªïng thanh to√°n",
        emoji: "üí≥",
        workspace: createdWorkspaces[2]._id,
        createdBy: createdUsers[1]._id, // Nguy·ªÖn VƒÉn An
      },

      // Workspace 3 - Marketing projects
      {
        name: "Campaign Facebook Ads",
        description: "Chi·∫øn d·ªãch qu·∫£ng c√°o Facebook cho kh√°ch h√†ng",
        emoji: "üì¢",
        workspace: createdWorkspaces[3]._id,
        createdBy: createdUsers[3]._id, // L√™ Minh C∆∞·ªùng
      },
      {
        name: "Content Marketing",
        description: "S·∫£n xu·∫•t n·ªôi dung marketing cho website",
        emoji: "‚úçÔ∏è",
        workspace: createdWorkspaces[3]._id,
        createdBy: createdUsers[4]._id, // Ph·∫°m Thu Dung
      },
    ];

    const createdProjects = await ProjectModel.insertMany(projects, {
      session,
    });
    console.log(`‚úÖ Created ${createdProjects.length} projects`);

    // 7. T·∫°o Tasks m·∫´u
    console.log("‚úÖ Creating sample tasks...");

    const tasks = [
      // Test Workspace - Demo Project tasks
      {
        title: "Setup Project Structure",
        description: "T·∫°o c·∫•u tr√∫c d·ª± √°n c∆° b·∫£n v·ªõi c√°c th∆∞ m·ª•c ch√≠nh",
        project: createdProjects[0]._id, // Demo Project
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.DONE,
        priority: TaskPriorityEnum.HIGH,
        assignedTo: createdUsers[0]._id, // Test User
        createdBy: createdUsers[0]._id,
        dueDate: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000), // 14 days ago
      },
      {
        title: "Create Database Schema",
        description: "Thi·∫øt k·∫ø v√† tri·ªÉn khai database schema cho d·ª± √°n",
        project: createdProjects[0]._id, // Demo Project
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.DONE,
        priority: TaskPriorityEnum.HIGH,
        assignedTo: createdUsers[1]._id, // Nguy·ªÖn VƒÉn An
        createdBy: createdUsers[0]._id,
        dueDate: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000), // 10 days ago
      },
      {
        title: "Implement Authentication",
        description: "T√≠ch h·ª£p h·ªá th·ªëng x√°c th·ª±c v·ªõi JWT v√† OAuth",
        project: createdProjects[0]._id, // Demo Project
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.IN_PROGRESS,
        priority: TaskPriorityEnum.HIGH,
        assignedTo: createdUsers[2]._id, // Tr·∫ßn Th·ªã B√¨nh
        createdBy: createdUsers[0]._id,
        dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3 days
      },
      {
        title: "Design UI Components",
        description: "Thi·∫øt k·∫ø c√°c component UI c∆° b·∫£n cho d·ª± √°n",
        project: createdProjects[0]._id, // Demo Project
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.IN_REVIEW,
        priority: TaskPriorityEnum.MEDIUM,
        assignedTo: createdUsers[1]._id, // Nguy·ªÖn VƒÉn An
        createdBy: createdUsers[0]._id,
        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days
      },
      {
        title: "Write Unit Tests",
        description: "Vi·∫øt unit tests cho c√°c modules ch√≠nh",
        project: createdProjects[0]._id, // Demo Project
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.TODO,
        priority: TaskPriorityEnum.MEDIUM,
        assignedTo: null,
        createdBy: createdUsers[0]._id,
        dueDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 14 days
      },

      // Test Workspace - Task Management System tasks
      {
        title: "Create Task Model",
        description: "T·∫°o model v√† schema cho tasks trong h·ªá th·ªëng",
        project: createdProjects[1]._id, // Task Management System
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.DONE,
        priority: TaskPriorityEnum.HIGH,
        assignedTo: createdUsers[0]._id, // Test User
        createdBy: createdUsers[0]._id,
        dueDate: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000), // 5 days ago
      },
      {
        title: "Build Task Dashboard",
        description: "Ph√°t tri·ªÉn dashboard hi·ªÉn th·ªã t·ªïng quan tasks",
        project: createdProjects[1]._id, // Task Management System
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.IN_PROGRESS,
        priority: TaskPriorityEnum.HIGH,
        assignedTo: createdUsers[1]._id, // Nguy·ªÖn VƒÉn An
        createdBy: createdUsers[0]._id,
        dueDate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000), // 5 days
      },
      {
        title: "Implement Drag & Drop",
        description: "T√≠ch h·ª£p t√≠nh nƒÉng k√©o th·∫£ cho kanban board",
        project: createdProjects[1]._id, // Task Management System
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.BACKLOG,
        priority: TaskPriorityEnum.MEDIUM,
        assignedTo: createdUsers[2]._id, // Tr·∫ßn Th·ªã B√¨nh
        createdBy: createdUsers[0]._id,
        dueDate: new Date(Date.now() + 21 * 24 * 60 * 60 * 1000), // 21 days
      },
      {
        title: "Add Real-time Notifications",
        description: "Th√™m th√¥ng b√°o real-time khi c√≥ c·∫≠p nh·∫≠t task",
        project: createdProjects[1]._id, // Task Management System
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.TODO,
        priority: TaskPriorityEnum.LOW,
        assignedTo: null,
        createdBy: createdUsers[0]._id,
        dueDate: new Date(Date.now() + 28 * 24 * 60 * 60 * 1000), // 28 days
      },

      // Test Workspace - E-learning Platform tasks
      {
        title: "Design Course Structure",
        description: "Thi·∫øt k·∫ø c·∫•u tr√∫c kh√≥a h·ªçc v√† b√†i gi·∫£ng",
        project: createdProjects[2]._id, // E-learning Platform
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.DONE,
        priority: TaskPriorityEnum.HIGH,
        assignedTo: createdUsers[1]._id, // Nguy·ªÖn VƒÉn An
        createdBy: createdUsers[1]._id,
        dueDate: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000), // 8 days ago
      },
      {
        title: "Build Video Player",
        description: "Ph√°t tri·ªÉn video player t√πy ch·ªânh cho b√†i gi·∫£ng",
        project: createdProjects[2]._id, // E-learning Platform
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.IN_PROGRESS,
        priority: TaskPriorityEnum.HIGH,
        assignedTo: createdUsers[2]._id, // Tr·∫ßn Th·ªã B√¨nh
        createdBy: createdUsers[1]._id,
        dueDate: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000), // 10 days
      },
      {
        title: "Create Quiz System",
        description: "X√¢y d·ª±ng h·ªá th·ªëng quiz v√† ƒë√°nh gi√° h·ªçc vi√™n",
        project: createdProjects[2]._id, // E-learning Platform
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.TODO,
        priority: TaskPriorityEnum.MEDIUM,
        assignedTo: createdUsers[0]._id, // Test User
        createdBy: createdUsers[1]._id,
        dueDate: new Date(Date.now() + 18 * 24 * 60 * 60 * 1000), // 18 days
      },
      {
        title: "Implement Progress Tracking",
        description: "Theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p c·ªßa h·ªçc vi√™n",
        project: createdProjects[2]._id, // E-learning Platform
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.BACKLOG,
        priority: TaskPriorityEnum.LOW,
        assignedTo: null,
        createdBy: createdUsers[1]._id,
        dueDate: new Date(Date.now() + 35 * 24 * 60 * 60 * 1000), // 35 days
      },

      // Test Workspace - Chat Application tasks
      {
        title: "Setup Socket.io Server",
        description: "C·∫•u h√¨nh server Socket.io cho real-time messaging",
        project: createdProjects[3]._id, // Chat Application
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.DONE,
        priority: TaskPriorityEnum.HIGH,
        assignedTo: createdUsers[2]._id, // Tr·∫ßn Th·ªã B√¨nh
        createdBy: createdUsers[2]._id,
        dueDate: new Date(Date.now() - 12 * 24 * 60 * 60 * 1000), // 12 days ago
      },
      {
        title: "Build Chat Interface",
        description: "Thi·∫øt k·∫ø giao di·ªán chat v·ªõi emoji v√† file sharing",
        project: createdProjects[3]._id, // Chat Application
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.IN_PROGRESS,
        priority: TaskPriorityEnum.HIGH,
        assignedTo: createdUsers[1]._id, // Nguy·ªÖn VƒÉn An
        createdBy: createdUsers[2]._id,
        dueDate: new Date(Date.now() + 8 * 24 * 60 * 60 * 1000), // 8 days
      },
      {
        title: "Add Voice Messages",
        description: "T√≠ch h·ª£p t√≠nh nƒÉng g·ª≠i tin nh·∫Øn voice",
        project: createdProjects[3]._id, // Chat Application
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.TODO,
        priority: TaskPriorityEnum.MEDIUM,
        assignedTo: createdUsers[0]._id, // Test User
        createdBy: createdUsers[2]._id,
        dueDate: new Date(Date.now() + 25 * 24 * 60 * 60 * 1000), // 25 days
      },
      {
        title: "Implement Group Chat",
        description: "Ph√°t tri·ªÉn t√≠nh nƒÉng chat nh√≥m v√† qu·∫£n l√Ω members",
        project: createdProjects[3]._id, // Chat Application
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.IN_REVIEW,
        priority: TaskPriorityEnum.MEDIUM,
        assignedTo: createdUsers[1]._id, // Nguy·ªÖn VƒÉn An
        createdBy: createdUsers[2]._id,
        dueDate: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000), // 15 days
      },

      // Test Workspace - Dashboard Analytics tasks
      {
        title: "Create Data Models",
        description: "Thi·∫øt k·∫ø models cho analytics v√† reporting",
        project: createdProjects[4]._id, // Dashboard Analytics
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.DONE,
        priority: TaskPriorityEnum.HIGH,
        assignedTo: createdUsers[0]._id, // Test User
        createdBy: createdUsers[0]._id,
        dueDate: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000), // 6 days ago
      },
      {
        title: "Build Chart Components",
        description: "T·∫°o c√°c components chart v·ªõi Chart.js ho·∫∑c D3",
        project: createdProjects[4]._id, // Dashboard Analytics
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.IN_PROGRESS,
        priority: TaskPriorityEnum.HIGH,
        assignedTo: createdUsers[1]._id, // Nguy·ªÖn VƒÉn An
        createdBy: createdUsers[0]._id,
        dueDate: new Date(Date.now() + 12 * 24 * 60 * 60 * 1000), // 12 days
      },
      {
        title: "Add Data Filtering",
        description: "Th√™m t√≠nh nƒÉng l·ªçc d·ªØ li·ªáu theo th·ªùi gian v√† category",
        project: createdProjects[4]._id, // Dashboard Analytics
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.TODO,
        priority: TaskPriorityEnum.MEDIUM,
        assignedTo: createdUsers[2]._id, // Tr·∫ßn Th·ªã B√¨nh
        createdBy: createdUsers[0]._id,
        dueDate: new Date(Date.now() + 20 * 24 * 60 * 60 * 1000), // 20 days
      },
      {
        title: "Export Report Feature",
        description: "T√≠nh nƒÉng xu·∫•t b√°o c√°o ra PDF v√† Excel",
        project: createdProjects[4]._id, // Dashboard Analytics
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.BACKLOG,
        priority: TaskPriorityEnum.LOW,
        assignedTo: null,
        createdBy: createdUsers[0]._id,
        dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days
      },

      // Test Workspace - Blog CMS tasks
      {
        title: "Design Content Editor",
        description: "Thi·∫øt k·∫ø rich text editor cho vi·ªác vi·∫øt b√†i",
        project: createdProjects[5]._id, // Blog CMS
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.DONE,
        priority: TaskPriorityEnum.HIGH,
        assignedTo: createdUsers[1]._id, // Nguy·ªÖn VƒÉn An
        createdBy: createdUsers[1]._id,
        dueDate: new Date(Date.now() - 9 * 24 * 60 * 60 * 1000), // 9 days ago
      },
      {
        title: "Build Comment System",
        description: "H·ªá th·ªëng comment v·ªõi reply v√† moderation",
        project: createdProjects[5]._id, // Blog CMS
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.IN_PROGRESS,
        priority: TaskPriorityEnum.MEDIUM,
        assignedTo: createdUsers[2]._id, // Tr·∫ßn Th·ªã B√¨nh
        createdBy: createdUsers[1]._id,
        dueDate: new Date(Date.now() + 16 * 24 * 60 * 60 * 1000), // 16 days
      },
      {
        title: "Add SEO Features",
        description: "T√≠ch h·ª£p c√°c t√≠nh nƒÉng SEO: meta tags, sitemap, etc.",
        project: createdProjects[5]._id, // Blog CMS
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.TODO,
        priority: TaskPriorityEnum.HIGH,
        assignedTo: createdUsers[0]._id, // Test User
        createdBy: createdUsers[1]._id,
        dueDate: new Date(Date.now() + 22 * 24 * 60 * 60 * 1000), // 22 days
      },
      {
        title: "Implement Media Gallery",
        description: "Qu·∫£n l√Ω h√¨nh ·∫£nh v√† media files cho blog",
        project: createdProjects[5]._id, // Blog CMS
        workspace: createdWorkspaces[0]._id,
        status: TaskStatusEnum.IN_REVIEW,
        priority: TaskPriorityEnum.MEDIUM,
        assignedTo: createdUsers[1]._id, // Nguy·ªÖn VƒÉn An
        createdBy: createdUsers[1]._id,
        dueDate: new Date(Date.now() + 18 * 24 * 60 * 60 * 1000), // 18 days
      },

      // Website C√¥ng ty tasks (Other workspaces)
      {
        title: "Thi·∫øt k·∫ø UI/UX Homepage",
        description: "T·∫°o wireframe v√† mockup cho trang ch·ªß website",
        project: createdProjects[6]._id, // Website C√¥ng ty
        workspace: createdWorkspaces[1]._id,
        status: TaskStatusEnum.DONE,
        priority: TaskPriorityEnum.HIGH,
        assignedTo: createdUsers[1]._id,
        createdBy: createdUsers[1]._id,
        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days
      },
      {
        title: "Ph√°t tri·ªÉn Frontend React",
        description: "Code giao di·ªán frontend v·ªõi React v√† TailwindCSS",
        project: createdProjects[6]._id, // Website C√¥ng ty
        workspace: createdWorkspaces[1]._id, // Tech Solutions
        status: TaskStatusEnum.IN_PROGRESS,
        priority: TaskPriorityEnum.HIGH,
        assignedTo: createdUsers[2]._id,
        createdBy: createdUsers[1]._id,
        dueDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 14 days
      },
      {
        title: "Setup Backend API",
        description: "C·∫•u h√¨nh Node.js, Express v√† MongoDB",
        project: createdProjects[6]._id, // Website C√¥ng ty
        workspace: createdWorkspaces[1]._id, // Tech Solutions
        status: TaskStatusEnum.TODO,
        priority: TaskPriorityEnum.MEDIUM,
        assignedTo: createdUsers[3]._id,
        createdBy: createdUsers[1]._id,
        dueDate: new Date(Date.now() + 21 * 24 * 60 * 60 * 1000), // 21 days
      },

      // Mobile App tasks
      {
        title: "Research iOS Development",
        description: "Nghi√™n c·ª©u c√¥ng ngh·ªá v√† framework ph√π h·ª£p",
        project: createdProjects[7]._id, // Mobile App iOS
        workspace: createdWorkspaces[1]._id, // Tech Solutions
        status: TaskStatusEnum.DONE,
        priority: TaskPriorityEnum.MEDIUM,
        assignedTo: createdUsers[2]._id,
        createdBy: createdUsers[2]._id,
        dueDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 7 days ago
      },
      {
        title: "T·∫°o Project Structure",
        description: "Setup project Swift v·ªõi Xcode",
        project: createdProjects[7]._id, // Mobile App iOS
        workspace: createdWorkspaces[1]._id, // Tech Solutions
        status: TaskStatusEnum.IN_REVIEW,
        priority: TaskPriorityEnum.HIGH,
        assignedTo: createdUsers[3]._id,
        createdBy: createdUsers[2]._id,
        dueDate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000), // 5 days
      },

      // API Backend tasks
      {
        title: "Thi·∫øt k·∫ø Database Schema",
        description: "Thi·∫øt k·∫ø c·∫•u tr√∫c database v√† relationships",
        project: createdProjects[8]._id, // API Backend
        workspace: createdWorkspaces[1]._id, // Tech Solutions
        status: TaskStatusEnum.BACKLOG,
        priority: TaskPriorityEnum.HIGH,
        assignedTo: null,
        createdBy: createdUsers[1]._id,
        dueDate: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000), // 10 days
      },

      // E-commerce tasks
      {
        title: "Ph√¢n t√≠ch y√™u c·∫ßu kh√°ch h√†ng",
        description: "Thu th·∫≠p v√† ph√¢n t√≠ch requirements t·ª´ stakeholders",
        project: createdProjects[9]._id, // S√†n th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠
        workspace: createdWorkspaces[2]._id, // E-commerce
        status: TaskStatusEnum.DONE,
        priority: TaskPriorityEnum.HIGH,
        assignedTo: createdUsers[2]._id,
        createdBy: createdUsers[2]._id,
        dueDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 days ago
      },
      {
        title: "Thi·∫øt k·∫ø catalog s·∫£n ph·∫©m",
        description: "T·∫°o giao di·ªán hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m",
        project: createdProjects[9]._id, // S√†n th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠
        workspace: createdWorkspaces[2]._id, // E-commerce
        status: TaskStatusEnum.IN_PROGRESS,
        priority: TaskPriorityEnum.MEDIUM,
        assignedTo: createdUsers[5]._id,
        createdBy: createdUsers[2]._id,
        dueDate: new Date(Date.now() + 12 * 24 * 60 * 60 * 1000), // 12 days
      },

      // Payment Gateway tasks
      {
        title: "T√≠ch h·ª£p VNPay",
        description: "Setup v√† test payment gateway VNPay",
        project: createdProjects[10]._id, // Payment Gateway
        workspace: createdWorkspaces[2]._id, // E-commerce
        status: TaskStatusEnum.TODO,
        priority: TaskPriorityEnum.HIGH,
        assignedTo: createdUsers[1]._id,
        createdBy: createdUsers[2]._id,
        dueDate: new Date(Date.now() + 20 * 24 * 60 * 60 * 1000), // 20 days
      },

      // Marketing tasks
      {
        title: "L·∫≠p chi·∫øn l∆∞·ª£c content",
        description: "X√¢y d·ª±ng content plan cho Q1 2024",
        project: createdProjects[11]._id, // Campaign Facebook Ads
        workspace: createdWorkspaces[3]._id, // Marketing
        status: TaskStatusEnum.IN_REVIEW,
        priority: TaskPriorityEnum.MEDIUM,
        assignedTo: createdUsers[4]._id,
        createdBy: createdUsers[3]._id,
        dueDate: new Date(Date.now() + 8 * 24 * 60 * 60 * 1000), // 8 days
      },
      {
        title: "Thi·∫øt k·∫ø banner qu·∫£ng c√°o",
        description: "T·∫°o creative cho Facebook v√† Google Ads",
        project: createdProjects[11]._id, // Campaign Facebook Ads
        workspace: createdWorkspaces[3]._id, // Marketing
        status: TaskStatusEnum.TODO,
        priority: TaskPriorityEnum.LOW,
        assignedTo: createdUsers[5]._id,
        createdBy: createdUsers[3]._id,
        dueDate: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000), // 15 days
      },

      // Content Marketing tasks
      {
        title: "Vi·∫øt blog v·ªÅ SEO",
        description: "T·∫°o b√†i vi·∫øt h∆∞·ªõng d·∫´n SEO cho website",
        project: createdProjects[12]._id, // Content Marketing
        workspace: createdWorkspaces[3]._id, // Marketing
        status: TaskStatusEnum.BACKLOG,
        priority: TaskPriorityEnum.MEDIUM,
        assignedTo: null,
        createdBy: createdUsers[4]._id,
        dueDate: new Date(Date.now() + 25 * 24 * 60 * 60 * 1000), // 25 days
      },
    ];

    await TaskModel.insertMany(tasks, { session });
    console.log(`‚úÖ Created ${tasks.length} tasks`);

    await session.commitTransaction();
    session.endSession();

    console.log("üéâ Sample data seeding completed successfully!");
    console.log(`
üìä Summary:
- ${createdUsers.length} Users
- ${accounts.length} Accounts  
- ${createdWorkspaces.length} Workspaces
- ${members.length} Members
- ${createdProjects.length} Projects
- ${tasks.length} Tasks

üîê Demo accounts (password: password123):
- test@example.com (Owner - Test Workspace) ‚≠ê MAIN TEST ACCOUNT
- an@example.com (Owner - Tech Solutions)
- binh@example.com (Owner - E-commerce) 
- cuong@example.com (Owner - Marketing)
- dung@example.com (Member)
- em@example.com (Member)
    `);
  } catch (error) {
    console.error("‚ùå Error during sample data seeding:", error);
  } finally {
    process.exit(0);
  }
};

seedSampleData().catch((error) =>
  console.error("‚ùå Error running sample data seed script:", error)
);
